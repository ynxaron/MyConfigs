"use strict";(globalThis.webpackChunknotion_next=globalThis.webpackChunknotion_next||[]).push([[81077],{260628:(t,e,r)=>{r.d(e,{A:()=>n});var n=class{constructor(t){this.init=t,this.records=this.init()}static{(0,r(3855).eW)(this,"ImperativeState")}reset(){this.records=this.init()}}},96569:(t,e,r)=>{r.d(e,{A:()=>n});function n(t,e){t.accDescr&&e.setAccDescription?.(t.accDescr),t.accTitle&&e.setAccTitle?.(t.accTitle),t.title&&e.setDiagramTitle?.(t.title)}(0,r(3855).eW)(n,"populateCommonDb")},81077:(t,e,r)=>{r.d(e,{diagram:()=>gt});var n=()=>r(268250),o=()=>r(3855),a={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},c=o().vZ.gitGraph,s=(0,o().eW)((()=>(0,n().Rb)({...c,...(0,o().iE)().gitGraph})),"getConfig"),i=new(r(260628).A)((()=>{const t=s(),e=t.mainBranchName,r=t.mainBranchOrder;return{mainBranchName:e,commits:new Map,head:null,branchConfig:new Map([[e,{name:e,order:r}]]),branches:new Map([[e,null]]),currBranch:e,direction:"LR",seq:0,options:{}}}));function h(){return(0,n().MX)({length:7})}function d(t,e){const r=Object.create(null);return t.reduce(((t,n)=>{const o=e(n);return r[o]||(r[o]=!0,t.push(n)),t}),[])}(0,o().eW)(h,"getID"),(0,o().eW)(d,"uniqBy");var $=(0,o().eW)((function(t){i.records.direction=t}),"setDirection"),m=(0,o().eW)((function(t){o().cM.debug("options str",t),t=t?.trim(),t=t||"{}";try{i.records.options=JSON.parse(t)}catch(e){o().cM.error("error while parsing gitGraph options",e.message)}}),"setOptions"),l=(0,o().eW)((function(){return i.records.options}),"getOptions"),g=(0,o().eW)((function(t){let e=t.msg,r=t.id;const n=t.type;let c=t.tags;o().cM.info("commit",e,r,n,c),o().cM.debug("Entering commit:",e,r,n,c);const d=s();r=o().SY.sanitizeText(r,d),e=o().SY.sanitizeText(e,d),c=c?.map((t=>o().SY.sanitizeText(t,d)));const $={id:r||i.records.seq+"-"+h(),message:e,seq:i.records.seq++,type:n??a.NORMAL,tags:c??[],parents:null==i.records.head?[]:[i.records.head.id],branch:i.records.currBranch};i.records.head=$,o().cM.info("main branch",d.mainBranchName),i.records.commits.set($.id,$),i.records.branches.set(i.records.currBranch,$.id),o().cM.debug("in pushCommit "+$.id)}),"commit"),y=(0,o().eW)((function(t){let e=t.name;const r=t.order;if(e=o().SY.sanitizeText(e,s()),i.records.branches.has(e))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${e}")`);i.records.branches.set(e,null!=i.records.head?i.records.head.id:null),i.records.branchConfig.set(e,{name:e,order:r}),f(e),o().cM.debug("in createBranch")}),"branch"),p=(0,o().eW)((t=>{let e=t.branch,r=t.id;const n=t.type,c=t.tags,d=s();e=o().SY.sanitizeText(e,d),r&&(r=o().SY.sanitizeText(r,d));const $=i.records.branches.get(i.records.currBranch),m=i.records.branches.get(e),l=$?i.records.commits.get($):void 0,g=m?i.records.commits.get(m):void 0;if(l&&g&&l.branch===e)throw new Error(`Cannot merge branch '${e}' into itself.`);if(i.records.currBranch===e){const t=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(void 0===l||!l){const t=new Error(`Incorrect usage of "merge". Current branch (${i.records.currBranch})has no commits`);throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["commit"]},t}if(!i.records.branches.has(e)){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") does not exist");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:[`branch ${e}`]},t}if(void 0===g||!g){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") has no commits");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:['"commit"']},t}if(l===g){const t=new Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(r&&i.records.commits.has(r)){const t=new Error('Incorrect usage of "merge". Commit with id:'+r+" already exists, use different custom Id");throw t.hash={text:`merge ${e} ${r} ${n} ${c?.join(" ")}`,token:`merge ${e} ${r} ${n} ${c?.join(" ")}`,expected:[`merge ${e} ${r}_UNIQUE ${n} ${c?.join(" ")}`]},t}const y=m||"",p={id:r||`${i.records.seq}-${h()}`,message:`merged branch ${e} into ${i.records.currBranch}`,seq:i.records.seq++,parents:null==i.records.head?[]:[i.records.head.id,y],branch:i.records.currBranch,type:a.MERGE,customType:n,customId:!!r,tags:c??[]};i.records.head=p,i.records.commits.set(p.id,p),i.records.branches.set(i.records.currBranch,p.id),o().cM.debug(i.records.branches),o().cM.debug("in mergeBranch")}),"merge"),x=(0,o().eW)((function(t){let e=t.id,r=t.targetId,n=t.tags,c=t.parent;o().cM.debug("Entering cherryPick:",e,r,n);const d=s();if(e=o().SY.sanitizeText(e,d),r=o().SY.sanitizeText(r,d),n=n?.map((t=>o().SY.sanitizeText(t,d))),c=o().SY.sanitizeText(c,d),!e||!i.records.commits.has(e)){const t=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}const $=i.records.commits.get(e);if(void 0===$||!$)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(c&&(!Array.isArray($.parents)||!$.parents.includes(c))){throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.")}const m=$.branch;if($.type===a.MERGE&&!c){throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.")}if(!r||!i.records.commits.has(r)){if(m===i.records.currBranch){const t=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}const t=i.records.branches.get(i.records.currBranch);if(void 0===t||!t){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}const s=i.records.commits.get(t);if(void 0===s||!s){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}const d={id:i.records.seq+"-"+h(),message:`cherry-picked ${$?.message} into ${i.records.currBranch}`,seq:i.records.seq++,parents:null==i.records.head?[]:[i.records.head.id,$.id],branch:i.records.currBranch,type:a.CHERRY_PICK,tags:n?n.filter(Boolean):[`cherry-pick:${$.id}${$.type===a.MERGE?`|parent:${c}`:""}`]};i.records.head=d,i.records.commits.set(d.id,d),i.records.branches.set(i.records.currBranch,d.id),o().cM.debug(i.records.branches),o().cM.debug("in cherryPick")}}),"cherryPick"),f=(0,o().eW)((function(t){if(t=o().SY.sanitizeText(t,s()),!i.records.branches.has(t)){const e=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw e.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},e}{i.records.currBranch=t;const e=i.records.branches.get(i.records.currBranch);i.records.head=void 0!==e&&e?i.records.commits.get(e)??null:null}}),"checkout");function u(t,e,r){const n=t.indexOf(e);-1===n?t.push(r):t.splice(n,1,r)}function b(t){const e=t.reduce(((t,e)=>t.seq>e.seq?t:e),t[0]);let r="";t.forEach((function(t){r+=t===e?"\t*":"\t|"}));const n=[r,e.id,e.seq];for(const o in i.records.branches)i.records.branches.get(o)===e.id&&n.push(o);if(o().cM.debug(n.join(" ")),e.parents&&2==e.parents.length&&e.parents[0]&&e.parents[1]){const r=i.records.commits.get(e.parents[0]);u(t,e,r),e.parents[1]&&t.push(i.records.commits.get(e.parents[1]))}else{if(0==e.parents.length)return;if(e.parents[0]){const r=i.records.commits.get(e.parents[0]);u(t,e,r)}}b(t=d(t,(t=>t.id)))}(0,o().eW)(u,"upsert"),(0,o().eW)(b,"prettyPrintCommitHistory");var w=(0,o().eW)((function(){o().cM.debug(i.records.commits);b([M()[0]])}),"prettyPrint"),B=(0,o().eW)((function(){i.reset(),(0,o().ZH)()}),"clear"),E=(0,o().eW)((function(){return[...i.records.branchConfig.values()].map(((t,e)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${e}`)})).sort(((t,e)=>(t.order??0)-(e.order??0))).map((({name:t})=>({name:t})))}),"getBranchesAsObjArray"),k=(0,o().eW)((function(){return i.records.branches}),"getBranches"),C=(0,o().eW)((function(){return i.records.commits}),"getCommits"),M=(0,o().eW)((function(){const t=[...i.records.commits.values()];return t.forEach((function(t){o().cM.debug(t.id)})),t.sort(((t,e)=>t.seq-e.seq)),t}),"getCommitsArray"),T={commitType:a,getConfig:s,setDirection:$,setOptions:m,getOptions:l,commit:g,branch:y,merge:p,cherryPick:x,checkout:f,prettyPrint:w,clear:B,getBranchesAsObjArray:E,getBranches:k,getCommits:C,getCommitsArray:M,getCurrentBranch:(0,o().eW)((function(){return i.records.currBranch}),"getCurrentBranch"),getDirection:(0,o().eW)((function(){return i.records.direction}),"getDirection"),getHead:(0,o().eW)((function(){return i.records.head}),"getHead"),setAccTitle:o().GN,getAccTitle:o().eu,getAccDescription:o().Mx,setAccDescription:o().U$,setDiagramTitle:o().g2,getDiagramTitle:o().Kr},L=(0,o().eW)(((t,e)=>{(0,r(96569).A)(t,e),t.dir&&e.setDirection(t.dir);for(const r of t.statements)W(r,e)}),"populate"),W=(0,o().eW)(((t,e)=>{const r={Commit:(0,o().eW)((t=>e.commit(v(t))),"Commit"),Branch:(0,o().eW)((t=>e.branch(R(t))),"Branch"),Merge:(0,o().eW)((t=>e.merge(P(t))),"Merge"),Checkout:(0,o().eW)((t=>e.checkout(A(t))),"Checkout"),CherryPicking:(0,o().eW)((t=>e.cherryPick(I(t))),"CherryPicking")}[t.$type];r?r(t):o().cM.error(`Unknown statement type: ${t.$type}`)}),"parseStatement"),v=(0,o().eW)((t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?a[t.type]:a.NORMAL,tags:t.tags??void 0})),"parseCommit"),R=(0,o().eW)((t=>({name:t.name,order:t.order??0})),"parseBranch"),P=(0,o().eW)((t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?a[t.type]:void 0,tags:t.tags??void 0})),"parseMerge"),A=(0,o().eW)((t=>t.branch),"parseCheckout"),I=(0,o().eW)((t=>({id:t.id,targetId:"",tags:0===t.tags?.length?void 0:t.tags,parent:t.parent})),"parseCherryPicking"),G={parse:(0,o().eW)((async t=>{const e=await(0,r(812491).Qc)("gitGraph",t);o().cM.debug(e),L(e,T)}),"parse")};var O=(0,o().nV)(),S=O?.gitGraph,q=10,H=40,z=new Map,D=new Map,Y=new Map,N=[],j=0,_="LR",K=(0,o().eW)((()=>{z.clear(),D.clear(),Y.clear(),j=0,N=[],_="LR"}),"clear"),F=(0,o().eW)((t=>{const e=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach((t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","tspan");r.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),r.setAttribute("dy","1em"),r.setAttribute("x","0"),r.setAttribute("class","row"),r.textContent=t.trim(),e.appendChild(r)})),e}),"drawText"),U=(0,o().eW)((t=>{let e,r,n;return"BT"===_?(r=(0,o().eW)(((t,e)=>t<=e),"comparisonFunc"),n=1/0):(r=(0,o().eW)(((t,e)=>t>=e),"comparisonFunc"),n=0),t.forEach((t=>{const o="TB"===_||"BT"==_?D.get(t)?.y:D.get(t)?.x;void 0!==o&&r(o,n)&&(e=t,n=o)})),e}),"findClosestParent"),V=(0,o().eW)((t=>{let e="",r=1/0;return t.forEach((t=>{const n=D.get(t).y;n<=r&&(e=t,r=n)})),e||void 0}),"findClosestParentBT"),Q=(0,o().eW)(((t,e,r)=>{let n=r,o=r;const a=[];t.forEach((t=>{const r=e.get(t);if(!r)throw new Error(`Commit not found for key ${t}`);r.parents.length?(n=Z(r),o=Math.max(n,o)):a.push(r),J(r,n)})),n=o,a.forEach((t=>{tt(t,n,r)})),t.forEach((t=>{const r=e.get(t);if(r?.parents.length){const t=V(r.parents);n=D.get(t).y-H,n<=o&&(o=n);const e=z.get(r.branch).pos,a=n-q;D.set(r.id,{x:e,y:a})}}))}),"setParallelBTPos"),X=(0,o().eW)((t=>{const e=U(t.parents.filter((t=>null!==t)));if(!e)throw new Error(`Closest parent not found for commit ${t.id}`);const r=D.get(e)?.y;if(void 0===r)throw new Error(`Closest parent position not found for commit ${t.id}`);return r}),"findClosestParentPos"),Z=(0,o().eW)((t=>X(t)+H),"calculateCommitPosition"),J=(0,o().eW)(((t,e)=>{const r=z.get(t.branch);if(!r)throw new Error(`Branch not found for commit ${t.id}`);const n=r.pos,o=e+q;return D.set(t.id,{x:n,y:o}),{x:n,y:o}}),"setCommitPosition"),tt=(0,o().eW)(((t,e,r)=>{const n=z.get(t.branch);if(!n)throw new Error(`Branch not found for commit ${t.id}`);const o=e+r,a=n.pos;D.set(t.id,{x:a,y:o})}),"setRootPosition"),et=(0,o().eW)(((t,e,r,n,o,c)=>{if(c===a.HIGHLIGHT)t.append("rect").attr("x",r.x-10).attr("y",r.y-10).attr("width",20).attr("height",20).attr("class",`commit ${e.id} commit-highlight${o%8} ${n}-outer`),t.append("rect").attr("x",r.x-6).attr("y",r.y-6).attr("width",12).attr("height",12).attr("class",`commit ${e.id} commit${o%8} ${n}-inner`);else if(c===a.CHERRY_PICK)t.append("circle").attr("cx",r.x).attr("cy",r.y).attr("r",10).attr("class",`commit ${e.id} ${n}`),t.append("circle").attr("cx",r.x-3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${n}`),t.append("circle").attr("cx",r.x+3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${n}`),t.append("line").attr("x1",r.x+3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${n}`),t.append("line").attr("x1",r.x-3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${n}`);else{const s=t.append("circle");if(s.attr("cx",r.x),s.attr("cy",r.y),s.attr("r",e.type===a.MERGE?9:10),s.attr("class",`commit ${e.id} commit${o%8}`),c===a.MERGE){const a=t.append("circle");a.attr("cx",r.x),a.attr("cy",r.y),a.attr("r",6),a.attr("class",`commit ${n} ${e.id} commit${o%8}`)}if(c===a.REVERSE){t.append("path").attr("d",`M ${r.x-5},${r.y-5}L${r.x+5},${r.y+5}M${r.x-5},${r.y+5}L${r.x+5},${r.y-5}`).attr("class",`commit ${n} ${e.id} commit${o%8}`)}}}),"drawCommitBullet"),rt=(0,o().eW)(((t,e,r,n)=>{if(e.type!==a.CHERRY_PICK&&(e.customId&&e.type===a.MERGE||e.type!==a.MERGE)&&S?.showCommitLabel){const o=t.append("g"),a=o.insert("rect").attr("class","commit-label-bkg"),c=o.append("text").attr("x",n).attr("y",r.y+25).attr("class","commit-label").text(e.id),s=c.node()?.getBBox();if(s&&(a.attr("x",r.posWithOffset-s.width/2-2).attr("y",r.y+13.5).attr("width",s.width+4).attr("height",s.height+4),"TB"===_||"BT"===_?(a.attr("x",r.x-(s.width+16+5)).attr("y",r.y-12),c.attr("x",r.x-(s.width+16)).attr("y",r.y+s.height-12)):c.attr("x",r.posWithOffset-s.width/2),S.rotateCommitLabel))if("TB"===_||"BT"===_)c.attr("transform","rotate(-45, "+r.x+", "+r.y+")"),a.attr("transform","rotate(-45, "+r.x+", "+r.y+")");else{const t=-7.5-(s.width+10)/25*9.5,e=10+s.width/25*8.5;o.attr("transform","translate("+t+", "+e+") rotate(-45, "+n+", "+r.y+")")}}}),"drawCommitLabel"),nt=(0,o().eW)(((t,e,r,n)=>{if(e.tags.length>0){let o=0,a=0,c=0;const s=[];for(const n of e.tags.reverse()){const e=t.insert("polygon"),i=t.append("circle"),h=t.append("text").attr("y",r.y-16-o).attr("class","tag-label").text(n),d=h.node()?.getBBox();if(!d)throw new Error("Tag bbox not found");a=Math.max(a,d.width),c=Math.max(c,d.height),h.attr("x",r.posWithOffset-d.width/2),s.push({tag:h,hole:i,rect:e,yOffset:o}),o+=20}for(const{tag:t,hole:e,rect:i,yOffset:h}of s){const o=c/2,s=r.y-19.2-h;if(i.attr("class","tag-label-bkg").attr("points",`\n      ${n-a/2-2},${s+2}  \n      ${n-a/2-2},${s-2}\n      ${r.posWithOffset-a/2-4},${s-o-2}\n      ${r.posWithOffset+a/2+4},${s-o-2}\n      ${r.posWithOffset+a/2+4},${s+o+2}\n      ${r.posWithOffset-a/2-4},${s+o+2}`),e.attr("cy",s).attr("cx",n-a/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===_||"BT"===_){const c=n+h;i.attr("class","tag-label-bkg").attr("points",`\n        ${r.x},${c+2}\n        ${r.x},${c-2}\n        ${r.x+q},${c-o-2}\n        ${r.x+q+a+4},${c-o-2}\n        ${r.x+q+a+4},${c+o+2}\n        ${r.x+q},${c+o+2}`).attr("transform","translate(12,12) rotate(45, "+r.x+","+n+")"),e.attr("cx",r.x+2).attr("cy",c).attr("transform","translate(12,12) rotate(45, "+r.x+","+n+")"),t.attr("x",r.x+5).attr("y",c+3).attr("transform","translate(14,14) rotate(45, "+r.x+","+n+")")}}}}),"drawCommitTags"),ot=(0,o().eW)((t=>{switch(t.customType??t.type){case a.NORMAL:return"commit-normal";case a.REVERSE:return"commit-reverse";case a.HIGHLIGHT:return"commit-highlight";case a.MERGE:return"commit-merge";case a.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}}),"getCommitClassType"),at=(0,o().eW)(((t,e,r,n)=>{const o={x:0,y:0};if(!(t.parents.length>0)){if("TB"===e)return 30;if("BT"===e){return(n.get(t.id)??o).y-H}return 0}{const r=U(t.parents);if(r){const a=n.get(r)??o;if("TB"===e)return a.y+H;if("BT"===e){return(n.get(t.id)??o).y-H}return a.x+H}}return 0}),"calculatePosition"),ct=(0,o().eW)(((t,e,r)=>{const n="BT"===_&&r?e:e+q,o="TB"===_||"BT"===_?n:z.get(t.branch)?.pos,a="TB"===_||"BT"===_?z.get(t.branch)?.pos:n;if(void 0===a||void 0===o)throw new Error(`Position were undefined for commit ${t.id}`);return{x:a,y:o,posWithOffset:n}}),"getCommitPosition"),st=(0,o().eW)(((t,e,r)=>{if(!S)throw new Error("GitGraph config not found");const n=t.append("g").attr("class","commit-bullets"),a=t.append("g").attr("class","commit-labels");let c="TB"===_||"BT"===_?30:0;const s=[...e.keys()],i=S?.parallelCommits??!1,h=(0,o().eW)(((t,r)=>{const n=e.get(t)?.seq,o=e.get(r)?.seq;return void 0!==n&&void 0!==o?n-o:0}),"sortKeys");let d=s.sort(h);"BT"===_&&(i&&Q(d,e,c),d=d.reverse()),d.forEach((t=>{const o=e.get(t);if(!o)throw new Error(`Commit not found for key ${t}`);i&&(c=at(o,_,c,D));const s=ct(o,c,i);if(r){const t=ot(o),e=o.customType??o.type,r=z.get(o.branch)?.index??0;et(n,o,s,t,r,e),rt(a,o,s,c),nt(a,o,s,c)}"TB"===_||"BT"===_?D.set(o.id,{x:s.x,y:s.posWithOffset}):D.set(o.id,{x:s.posWithOffset,y:s.y}),c="BT"===_&&i?c+H:c+H+q,c>j&&(j=c)}))}),"drawCommits"),it=(0,o().eW)(((t,e,r,n,a)=>{const c=("TB"===_||"BT"===_?r.x<n.x:r.y<n.y)?e.branch:t.branch,s=(0,o().eW)((t=>t.branch===c),"isOnBranchToGetCurve"),i=(0,o().eW)((r=>r.seq>t.seq&&r.seq<e.seq),"isBetweenCommits");return[...a.values()].some((t=>i(t)&&s(t)))}),"shouldRerouteArrow"),ht=(0,o().eW)(((t,e,r=0)=>{const n=t+Math.abs(t-e)/2;if(r>5)return n;if(N.every((t=>Math.abs(t-n)>=10)))return N.push(n),n;const o=Math.abs(t-e);return ht(t,e-o/5,r+1)}),"findLane"),dt=(0,o().eW)(((t,e,r,n)=>{const o=D.get(e.id),c=D.get(r.id);if(void 0===o||void 0===c)throw new Error(`Commit positions not found for commits ${e.id} and ${r.id}`);const s=it(e,r,o,c,n);let i,h="",d="",$=0,m=0,l=z.get(r.branch)?.index;if(r.type===a.MERGE&&e.id!==r.parents[0]&&(l=z.get(e.branch)?.index),s){h="A 10 10, 0, 0, 0,",d="A 10 10, 0, 0, 1,",$=10,m=10;const t=o.y<c.y?ht(o.y,c.y):ht(c.y,o.y),r=o.x<c.x?ht(o.x,c.x):ht(c.x,o.x);"TB"===_?o.x<c.x?i=`M ${o.x} ${o.y} L ${r-$} ${o.y} ${d} ${r} ${o.y+m} L ${r} ${c.y-$} ${h} ${r+m} ${c.y} L ${c.x} ${c.y}`:(l=z.get(e.branch)?.index,i=`M ${o.x} ${o.y} L ${r+$} ${o.y} ${h} ${r} ${o.y+m} L ${r} ${c.y-$} ${d} ${r-m} ${c.y} L ${c.x} ${c.y}`):"BT"===_?o.x<c.x?i=`M ${o.x} ${o.y} L ${r-$} ${o.y} ${h} ${r} ${o.y-m} L ${r} ${c.y+$} ${d} ${r+m} ${c.y} L ${c.x} ${c.y}`:(l=z.get(e.branch)?.index,i=`M ${o.x} ${o.y} L ${r+$} ${o.y} ${d} ${r} ${o.y-m} L ${r} ${c.y+$} ${h} ${r-m} ${c.y} L ${c.x} ${c.y}`):o.y<c.y?i=`M ${o.x} ${o.y} L ${o.x} ${t-$} ${h} ${o.x+m} ${t} L ${c.x-$} ${t} ${d} ${c.x} ${t+m} L ${c.x} ${c.y}`:(l=z.get(e.branch)?.index,i=`M ${o.x} ${o.y} L ${o.x} ${t+$} ${d} ${o.x+m} ${t} L ${c.x-$} ${t} ${h} ${c.x} ${t-m} L ${c.x} ${c.y}`)}else h="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",$=20,m=20,"TB"===_?(o.x<c.x&&(i=r.type===a.MERGE&&e.id!==r.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y-$} ${h} ${o.x+m} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x-$} ${o.y} ${d} ${c.x} ${o.y+m} L ${c.x} ${c.y}`),o.x>c.x&&(h="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",$=20,m=20,i=r.type===a.MERGE&&e.id!==r.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y-$} ${d} ${o.x-m} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x+$} ${o.y} ${h} ${c.x} ${o.y+m} L ${c.x} ${c.y}`),o.x===c.x&&(i=`M ${o.x} ${o.y} L ${c.x} ${c.y}`)):"BT"===_?(o.x<c.x&&(i=r.type===a.MERGE&&e.id!==r.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y+$} ${d} ${o.x+m} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x-$} ${o.y} ${h} ${c.x} ${o.y-m} L ${c.x} ${c.y}`),o.x>c.x&&(h="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",$=20,m=20,i=r.type===a.MERGE&&e.id!==r.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y+$} ${h} ${o.x-m} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x-$} ${o.y} ${h} ${c.x} ${o.y-m} L ${c.x} ${c.y}`),o.x===c.x&&(i=`M ${o.x} ${o.y} L ${c.x} ${c.y}`)):(o.y<c.y&&(i=r.type===a.MERGE&&e.id!==r.parents[0]?`M ${o.x} ${o.y} L ${c.x-$} ${o.y} ${d} ${c.x} ${o.y+m} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${o.x} ${c.y-$} ${h} ${o.x+m} ${c.y} L ${c.x} ${c.y}`),o.y>c.y&&(i=r.type===a.MERGE&&e.id!==r.parents[0]?`M ${o.x} ${o.y} L ${c.x-$} ${o.y} ${h} ${c.x} ${o.y-m} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${o.x} ${c.y+$} ${d} ${o.x+m} ${c.y} L ${c.x} ${c.y}`),o.y===c.y&&(i=`M ${o.x} ${o.y} L ${c.x} ${c.y}`));if(void 0===i)throw new Error("Line definition not found");t.append("path").attr("d",i).attr("class","arrow arrow"+l%8)}),"drawArrow"),$t=(0,o().eW)(((t,e)=>{const r=t.append("g").attr("class","commit-arrows");[...e.keys()].forEach((t=>{const n=e.get(t);n.parents&&n.parents.length>0&&n.parents.forEach((t=>{dt(r,e.get(t),n,e)}))}))}),"drawArrows"),mt=(0,o().eW)(((t,e)=>{const r=t.append("g");e.forEach(((t,e)=>{const n=e%8,o=z.get(t.name)?.pos;if(void 0===o)throw new Error(`Position not found for branch ${t.name}`);const a=r.append("line");a.attr("x1",0),a.attr("y1",o),a.attr("x2",j),a.attr("y2",o),a.attr("class","branch branch"+n),"TB"===_?(a.attr("y1",30),a.attr("x1",o),a.attr("y2",j),a.attr("x2",o)):"BT"===_&&(a.attr("y1",j),a.attr("x1",o),a.attr("y2",30),a.attr("x2",o)),N.push(o);const c=t.name,s=F(c),i=r.insert("rect"),h=r.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+n);h.node().appendChild(s);const d=s.getBBox();i.attr("class","branchLabelBkg label"+n).attr("rx",4).attr("ry",4).attr("x",-d.width-4-(!0===S?.rotateCommitLabel?30:0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),h.attr("transform","translate("+(-d.width-14-(!0===S?.rotateCommitLabel?30:0))+", "+(o-d.height/2-1)+")"),"TB"===_?(i.attr("x",o-d.width/2-10).attr("y",0),h.attr("transform","translate("+(o-d.width/2-5)+", 0)")):"BT"===_?(i.attr("x",o-d.width/2-10).attr("y",j),h.attr("transform","translate("+(o-d.width/2-5)+", "+j+")")):i.attr("transform","translate(-19, "+(o-d.height/2)+")")}))}),"drawBranches"),lt=(0,o().eW)((function(t,e,r,n,o){return z.set(t,{pos:e,index:r}),e+=50+(o?40:0)+("TB"===_||"BT"===_?n.width/2:0)}),"setBranchPosition");var gt={parser:G,db:T,renderer:{draw:(0,o().eW)((function(t,e,a,c){if(K(),o().cM.debug("in gitgraph renderer",t+"\n","id:",e,a),!S)throw new Error("GitGraph config not found");const s=S.rotateCommitLabel??!1,i=c.db;Y=i.getCommits();const h=i.getBranchesAsObjArray();_=i.getDirection();const d=(0,r(632979).Ys)(`[id="${e}"]`);let $=0;h.forEach(((t,e)=>{const r=F(t.name),n=d.append("g"),o=n.insert("g").attr("class","branchLabel"),a=o.insert("g").attr("class","label branch-label");a.node()?.appendChild(r);const c=r.getBBox();$=lt(t.name,$,e,c,s),a.remove(),o.remove(),n.remove()})),st(d,Y,!1),S.showBranches&&mt(d,h),$t(d,Y),st(d,Y,!0),n().w8.insertTitle(d,"gitTitleText",S.titleTopMargin??0,i.getDiagramTitle()),(0,o().Rw)(void 0,d,S.diagramPadding,S.useMaxWidth)}),"draw")},styles:(0,o().eW)((t=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map((e=>`\n        .branch-label${e} { fill: ${t["gitBranchLabel"+e]}; }\n        .commit${e} { stroke: ${t["git"+e]}; fill: ${t["git"+e]}; }\n        .commit-highlight${e} { stroke: ${t["gitInv"+e]}; fill: ${t["gitInv"+e]}; }\n        .label${e}  { fill: ${t["git"+e]}; }\n        .arrow${e} { stroke: ${t["git"+e]}; }\n        `)).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${t.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}\n  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}\n  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }\n  .tag-hole { fill: ${t.textColor}; }\n\n  .commit-merge {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${t.textColor};\n  }\n`),"getStyles")}}}]);